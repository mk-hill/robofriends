{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","marginTop","overflowY","border","borderRadius","height","children","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","target","value","state","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86e2e71b.chunk.js","sourcesContent":["import React from 'react';\n\n// Destructuring props\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow be shadow-5 tc\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot, i) => {\n        return (\n          <Card\n            // Key appears to be inaccessible as a prop, duplicating as id for Card component\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        marginTop: '20px',\n        overflowY: 'scroll',\n        border: '2px solid rgba(12, 202, 196, .2)',\n        borderRadius: '10px',\n        height: '800px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","export const robots = [\n  {\n    id: 1,\n    name: 'Legion',\n    username: '123e4567-e89b',\n    email: '123e4567@geth-r.us',\n  },\n  {\n    id: 2,\n    name: 'C-3PO',\n    username: 'Antonette',\n    email: 'peeo@consular.org',\n  },\n  {\n    id: 3,\n    name: 'Liberty Prime',\n    username: 'Democracy_Non_Negotiable',\n    email: 'lib_prime@army.mil',\n  },\n  {\n    id: 4,\n    name: 'Bender',\n    username: 'Karianne',\n    email: '2716057@industrial.bot',\n  },\n  {\n    id: 5,\n    name: 'Data',\n    username: 'Lore',\n    email: 'lore@fleet.fed',\n  },\n  {\n    id: 6,\n    name: 'GLaDOS',\n    username: 'Samantha',\n    email: 'os@aperture.sci',\n  },\n  {\n    id: 7,\n    name: 'Centurion',\n    username: 'Elwyn.Skiles',\n    email: 'cent_e89b@cylon.net',\n  },\n  {\n    id: 8,\n    name: 'Servitor',\n    username: 'Maxime_Nienow',\n    email: '01@mechanicus.me',\n  },\n  {\n    id: 9,\n    name: 'HAL 9000',\n    username: 'Delphine',\n    email: 'hal@dana.ai',\n  },\n  {\n    id: 10,\n    name: 'HK-47',\n    username: 'hunter-killer',\n    email: 'hk-47@assassin.io',\n  },\n  {\n    id: 11,\n    name: 'EDI',\n    username: 'Enhanced.Defense.Intelligence',\n    email: 'edi@cerberus.biz',\n  },\n  {\n    id: 12,\n    name: 'Cyberking',\n    username: 'Cyberking',\n    email: 'king@cybermen.org',\n  },\n  {\n    id: 13,\n    name: 'Adjutant',\n    username: 'terran.adjutant',\n    email: 'adjutant@terran-confederacy.gov',\n  },\n  {\n    id: 14,\n    name: 'Nordom',\n    username: 'Moriah.Stanton',\n    email: 'Nordom@modron.mech',\n  },\n  {\n    id: 15,\n    name: 'Dalek Supreme',\n    username: 'Moriah.Stanton',\n    email: 'supreme@skaro.com',\n  },\n];\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { robots } from '../robots';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(res => res.json())\n    //   .then(users => this.setState({ robots: users }));\n    this.setState({ robots: robots });\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return !robots.length ? (\n      <h1 className=\"tc f1 mt5\">Loading RoboFriends</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}