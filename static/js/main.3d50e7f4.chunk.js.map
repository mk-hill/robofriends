{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/Header.tsx","components/MainPage.tsx","containers/App.tsx","actions.js","constants.js","serviceWorker.js","reducers.js","index.tsx"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","marginTop","overflowY","border","borderRadius","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","MainPage","filterRobots","_this$props","searchField","filter","toLowerCase","includes","onRequestRobots","_this$props2","onSearchChange","isPending","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","App","src_components_MainPage","connect","searchRobots","requestRobots","dispatch","event","payload","currentTarget","value","fetch","then","res","json","usersData","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d50e7f4.chunk.js","sourcesContent":["import React from 'react';\n\ninterface CardProps {\n  name: string;\n  email: string;\n  id: number;\n}\n\n// Destructuring props\nconst Card: React.FunctionComponent<CardProps> = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow be shadow-5 tc\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { IRobot } from '../containers/App';\n\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\n  return (\n    <div>\n      {robots.map((robot, i) => {\n        return (\n          <Card\n            // Key appears to be inaccessible as a prop, duplicating as id for Card component\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\ntype Props = {\n  children?: JSX.Element;\n};\n\nconst Scroll = (props: Props) => {\n  return (\n    <div\n      style={{\n        marginTop: '20px',\n        overflowY: 'scroll',\n        border: '2px solid rgba(12, 202, 196, .2)',\n        borderRadius: '10px',\n        height: '800px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<{}, ErrorBoundaryState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n// import CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return <h1 className=\"f1\">RoboFriends</h1>;\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\nimport Header from './Header';\nimport { IRobot } from '../containers/App';\n\nimport './MainPage.css';\n\ninterface IMainPageProps {\n  searchField?: string;\n  robots?: Array<IRobot>;\n  isPending?: boolean;\n  error?: string;\n  onSearchChange?: any;\n  onRequestRobots?: any;\n}\n\nclass MainPage extends Component<IMainPageProps> {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    const { robots, searchField } = this.props;\n    return robots.filter(robot =>\n      robot.name\n        ? robot.name.toLowerCase().includes(searchField.toLowerCase())\n        : null\n    );\n  };\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1 className=\"tc f1 mt5\">Loading</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()} />\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MainPage from '../components/MainPage';\n\n// import { robots } from '../robots';\n// import './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  email: string;\n}\n\nexport interface IAppProps {\n  robots: Array<IRobot>;\n  searchField: string;\n}\n\ninterface IAppState {\n  // robots: Array<IRobot>;\n  // searchField: string;\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>): void =>\n      dispatch(setSearchField(event.currentTarget.value)),\n    // onRequestRobots: () => requestRobots(dispatch),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component<IAppProps, IAppState> {\n  // Constructor no longer required, robots received as props\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //     // searchField: '',\n  //   };\n  // }\n\n  // componentDidMount() {\n  //   this.props.onRequestRobots();\n  // Earlier fetch call without redux:\n  // fetch('https://jsonplaceholder.typicode.com/users')\n  //   .then(res => res.json())\n  //   .then(users => this.setState({ robots: users }));\n  // Earlier local robots file without fetch:\n  // this.setState({ robots: robots });\n  // }\n\n  // onSearchChange = e => {\n  //   this.setState({ searchField: e.target.value });\n  // };\n\n  render(): JSX.Element {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n// Using redux-thunk to invoke returned function with dispatch\r\n// Redux out of the box appears to expect actions to return objects only\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(usersData =>\r\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: usersData })\r\n    )\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n// 3 states for request robots promise\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    // return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  // error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}